apply plugin: 'groovy'
apply plugin: 'com.leroymerlin.delivery'

delivery {

    enableReleaseGitFlow = true

    archiveRepositories = project.ext.properties.containsKey('bintrayMobiletribeRepositories') ? project.ext.bintrayMobiletribeRepositories : {
    }

    flows {
        documentation {
            step 'documentation', 'Generate documentation'
            task 'createDoc', true
            add 'delivery-doc/html/.'
        }
    }
}

repositories {
    jcenter()
    maven { url('http://repository.openbakery.org/') }
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    jarLibs
    // add only transitive dependency to the implementation config
    transitiveImplementation
}

jar {
    from {
        configurations.jarLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


dependencies {
    implementation gradleApi()
    implementation localGroovy()

    //xcode-plugin not available in a public repo. We add it in the plugin jar
    jarLibs("org.openbakery:xcode-plugin:0.19.1") {
        transitive = false
    }
    transitiveImplementation("org.openbakery:xcode-plugin:0.19.1")

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.android.tools.build:gradle:3.5.1'
}

ResolvedDependency topDependency = configurations.transitiveImplementation.resolvedConfiguration.firstLevelModuleDependencies.iterator().next()
topDependency.children.each { ResolvedDependency child ->
    project.dependencies.implementation(child.module.toString())
}

test {
    testLogging {
        events "standardOut", "standardError"
    }
}

task('createDoc', dependsOn: project(':delivery-doc').getTasksByName('asciidoctor', false))

project.afterEvaluate({
    def docFlow = tasks.findByPath('documentationFlow')
    tasks.findByPath('releaseGitStepCommitVersionFiles').dependsOn += docFlow
    docFlow.mustRunAfter tasks.findByPath('releaseGitStepGenerateVersionFiles')
})
